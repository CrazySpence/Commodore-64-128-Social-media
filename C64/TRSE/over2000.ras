program over2000;
/* TT 2000 follower milestone
 * Decided to stuff many genres into this one, made the smb tilemap in CharPad PRO
 * Sprite scroller from TRSE, turned the wavyness waaaaay up
 * Chemical plant SID to include the Sonic folks the author data says this was made in 2019 by acrouzet
 */
var  
	 const useKernal        : byte =  0;
	 g_currentBank          : byte = 0;
	 temp2                  : array[256] of byte;
   time,scrollVal,startx,i,k,l,j,col: byte;
   ep,zp,tp,m,p1             : pointer; 
   const charsetLocation            : address = $3000;
   charsetSMB             : IncBin("resources/charsets/smbmc.bin",charsetLocation);
   colors                 : Incbin("resources/charsets/smbmc_color.bin",charsetLocation+$200);
   tile_data              : Incbin("resources/charsets/smbmc_tiles.bin",$3241);
   map_data               : Incbin("resources/charsets/smbmc_longmap.bin",$3300);
       
   //Music 
   sidfile: incsid("chemical_plant.sid",2);       
   const maxTextSprites : byte = 8;

	 // Variables for holding sprite values
	 // x and y
	 textSprite_x:array[maxTextSprites] of byte;
	 textSprite_y:array[maxTextSprites] of byte;
	 // Current color
	 textSprite_col:array[maxTextSprites] of byte;
	 textSprite_status:array[maxTextSprites] of byte;
	 textSprite_t:array[maxTextSprites] of byte;
	 textSprite_cnt:byte=0;
	 ms_x: integer;
	
	 scrollerText : string=(" TWO THOUSAND FOLLOWERS ON TIKTOK        ",0);

	 colorsGreen : array [16] of byte = (  11,11,3,12,13,13,14,6,  6,14,13,13,12,3,11,11  );

    // Position of large charset
    @define charsetLoc $35d1

	  charset : incbin("16cs.bin", @charsetLoc);

    // Position of generated chars
    @define generatedSpritesLoc $2800
    // Sprite loc on vic bank

    @define spriteScrollerWaviness 6

    @define spriteScrollerYPos 90

    @define spriteTextColor colorsGreen
@startblock $5000 "My Code" //address $9000	

// Prints a 2x2 block at position x,y with the upper left value of c, (and c+1, c+2 and c+3)
// Also prints colors based of the "colors" pointer 
// Original credit to the TRSE game turotial with minor modifications
procedure print2x2block(x,y,c:byte);
begin
	 moveto(x,y,hi(screen_char_loc));
	 screenmemory[0] :=tile_data[c];
	 screenmemory[1] :=tile_data[c+1];
	 screenmemory[40]:=tile_data[c+2];
	 screenmemory[41]:=tile_data[c+3];
   //Colouring, the tile_data will return the char value via c and thus provide the correct item to colour
	 moveto(x,y,hi(screen_col_loc));
	 screenmemory[0] :=colors[tile_data[c]];
	 screenmemory[1] :=colors[tile_data[c+1]];
	 screenmemory[40]:=colors[tile_data[c+2]];
	 screenmemory[41]:=colors[tile_data[c+3]];
end;

//Print out single screen map in map data.
//Should do some math like map value * 4 as tile_data is a tile every 4 chars
procedure printMap();
begin
	 k:=1;
	 l:=1;
	 for i:=1 to 240 do begin
		  print2x2block(k,l,map_data[i]*4);
		  k:=k+2;
		  if k = 41 then begin
			   k:=1;
			   l:=l+2;
		  end;
	 end;	
end;

//Print a map starting at mapx
//assuming mapheight = 12
//assuming screen tiles = 240

procedure printLongMap(mapx,mapl:byte);
begin
	 //$FF = 255
	 //$28 = 40
	
	 k:=1;
	 l:=1;
	 m:=#map_data+mapx;
	 for i:=1 to 240 do begin
		  print2x2block(k,l,@m[0]*4);
		  k:=k+2;
		  if k >= 41 then begin
			   k:=1;
			   l:=l+2;
			   m:=m+mapl-20;
		  end;
	    m:=m+$1
	 end	
end;

procedure Renew16x16Sprites();
procedure Maintain16x16Sprites();

interrupt RasterMain();
begin
	 StartIRQ(useKernal);
	 time := time+1;
	 call(sidfile_1_play); //Play music
   //Do Sprite jobs
   Renew16x16Sprites();
	 Maintain16x16Sprites();
   if(time&1=0) then begin  //This song played really slow for some reason so occasionally I call it a second time	
	    call(sidfile_1_play);
	 end;
   closeirq();
end;

/* sprite scroller */
// Generates sprite data from 16x16 font 

procedure GenerateSprites();
begin
	 // Place at p1
	 // Org at zp
	 tp:=zp;
	 // Let tp point to the "next" line in character data (8 bytes *40 chars = 320 )
	 tp:=tp+320; 
	 // Loop through all 26 characters A-Z
	 for k:=0 to 26 do begin 
		  fill(p1, 0, 64); // Clear sprite data  

	    j:=0;
	    // There are 8x4 = 32 bytes of data that we use (the rest of the sprite is unused)
	    for i:=0 to 8 do begin
			   p1[j]:=zp[i]; 
			   p1[j+1]:=zp[i+8];
			   p1[j+24]:=tp[i];
			   p1[j+25]:=tp[i+8];
			   j:=j+3;
	    end;
	    // Advance sprite pointer
	    p1:=p1+64;
	    // Advance pointers to font data
	    zp:=zp+16;
	    tp:=tp+16;
	    // at character 15, set new font positions
	    if (k=15) then begin
	       zp:=zp+384;
			   tp:=tp+384;//64+160+160 down
	    end;
	 end;
end;

// Maintains the sprites : moving them, setting y pos, color,turns off
procedure Maintain16x16Sprites();
begin
	 col:=0;
	 for i:=0 to maxTextSprites do 
	 begin
		  if (textSprite_status[i]=1) then 
		  begin
			   textSprite_x[i]:=textSprite_x[i] -1;
			   k:=textSprite_t[i];
			   textSprite_y[i]:=@spriteScrollerYPos + temp2[k];
			   ms_x:=textSprite_x[i]*2;
			   spritepos(ms_x, textSprite_y[i], i);
			   textSprite_t[i]:=textSprite_t[i]+3;
         inc(textSprite_col[i]);
			   k:=textSprite_col[i]&15;
			   sprite_color[i]:= @spriteTextColor[k];

			   if (textSprite_x[i]>250) then begin
				    togglebit(sprite_bitmask,i,0);
				    textSprite_status[i]:=0;
			   end;
		  end;
	 end;
end;

// Renews a new sprite (from text), called whenever a sprite leaves the screen and a
// new one is chosen

procedure Renew16x16Sprites();
begin
	 inc(textSprite_cnt);
	 if (textSprite_cnt<24) then return();
	 textSprite_cnt:=0;

	 k:=ep[0];
	 if (k=key_space) then  // skip on $20
	 begin
		  ep:=ep+1;
		  if (ep[0]=0) then ep:=#scrollerText;
		  return();
	 end;
	 if (k>64) then begin
		  k:=k-64-1;
		  j:=255;
		  // Find a slot for the sprite
		  for i:=0 to maxTextSprites do 
			   if textSprite_status[i]=0 then j:=i;
		
		  if (j<>255) then begin
			   textSprite_x[j]:=176;
			   textSprite_status[j]:=1;
			   togglebit(sprite_bitmask, j, 1);
			   textSprite_col[j]:=0;
			   setspriteloc(j, @generatedSpritesLoc/64 +k, 0);
			   textSprite_t[j]:=time;
			   ep:=ep+1;
		  end;

	 end;
end;

// Initializes sprites and generates sprite data
procedure Init16x16Sprites();
begin
	 ep:=#scrollerText; 
	 zp:=@charsetLoc;
	 p1:=@generatedSpritesLoc;
	 GenerateSprites();

	 sprite_bitmask:=$00;
	 sprite_stretch_X:=$FF;
	 sprite_stretch_Y:=$FF;

	 fill(#textSprite_status,0,maxTextSprites);
	 // Set up sine function
	 for i:=0 to 0 do
	    temp2[i]:=sine[i]/@spriteScrollerWaviness;

end;

procedure InitMap();
begin
	 printLongMap(1,60);	
	
end;

procedure InitScreen();
begin
   //Set Colours
   screen_fg_col:=black;
   screen_bg_col:=black;
   multicolor_char_col[1]:=light_blue;
   multicolor_char_col[2]:=green;
	 setmulticolormode();
	 HideBorderx(1);
	 //char 8 is a blank square in this set
	 clearscreen(8, screen_char_loc);
	 clearscreen(8, screen_char_loc+bank_size);
       
end;   
begin
	 startx:=1;
	 time:=0;
   InitScreen();
   Init16x16Sprites();
	 SetCharsetLocation(charsetLocation); 
	 InitMap();
	 InitSid(sidfile_1_init); //Init SID music 
	 //Set up interrupt
   preventirq();
   disableciainterrupts();
   SetMemoryConfig(1,@useKernal,0);
   RasterIRQ(RasterMain(),10,useKernal);
   EnableRasterIRQ();
   enableirq();
   Loop();
end.
@endblock
