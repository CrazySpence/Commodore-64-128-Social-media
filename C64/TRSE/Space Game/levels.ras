//Level subs set up completion parameters and enemies

//Movement of entities spawn<entity>(x,y,ystop,yspeed,ymovedelay,movementarray,<,maybe color>)
//Charging Dralthi Example: spawnDralthi(233,130,250,1,100,0);
//Speed galaxy example: spawnGalaxy(120,0,250,4,50,3,orange);
//Static ships can be done by making ystop the same as y, speed 0, delay 0. Static ships may still move on X axis if move array says so
//Static Examples:
//spawnGalaxy(273,80,80,0,0,3,yellow);
//spawnDralthi(153,130,130,0,0,3);

procedure level9();
begin
    currentInit  := $1b00; //Main level Music
	currentPlay  := $1b03;
	level.lvl      := 9;
//	level.desc     := "large wave of enemy fleet attacks!";
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 20;
	level.complete := 0;
	levelKills     := 0;
	respawnDelay   := 100;
	spawnFDelay    := 50;
	level.boss     := 0;
	doLevelStartScreen();	
	spawn(113,80,80,0,0,0,red,5);
	spawn(33,0,80,1,0,0,red,5);
	spawn(273,0,80,1,0,0,red,5);
	spawn(153,130,130,0,0,0,red,5);
    spawn(73,130,250,1,100,0,red,5); 
	spawn(233,130,250,1,100,0,red,5);
	spawn(193,80,80,0,0,0,red,5);
	initPlayer();
end;

procedure level8();
begin
    currentInit  := $1b00; //Main level Music
	currentPlay  := $1b03;
	level.lvl      := 8;
//	level.desc     := "large wave of enemy fleet attacks!";
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 20;
	level.complete := 0;
	levelKills     := 0;
	respawnDelay   := 200;
	spawnFDelay    := 100;
	level.boss     := 0;
	doLevelStartScreen();
	spawn(113,0,250,1,130,3,brown,4);
	spawn(33,0,250,1,130,3,brown,3);
	spawn(273,0,250,1,100,3,brown,4);
	spawn(153,0,250,1,60,3,brown,3);
    spawn(73,0,250,1,0,3,brown,4); 
	spawn(233,0,250,1,25,3,brown,3);
	spawn(193,0,250,1,200,3,brown,3);
	initPlayer();	
end;

procedure level7();
begin
	currentInit  := $9800; //Raptor wave 2
	currentPlay  := $9803;
	level.lvl      := 7;
//	level.desc     := "large wave of enemy fleet attacks!";
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 20;
	level.complete := 0;
	levelKills     := 0;
	respawnDelay   := 200;
	spawnFDelay    := 100;
	level.boss     := 0;
	doLevelStartScreen();
	spawn(113,0,250,1,130,3,brown,3);
	spawn(33,0,250,1,130,3,brown,3);
	spawn(273,0,250,1,100,3,yellow,2);
	spawn(153,0,250,1,60,3,brown,3);
    spawn(73,0,250,1,0,3,brown,1); 
	spawn(233,0,250,1,25,3,brown,1);
	spawn(193,0,250,1,200,3,brown,3);
	initPlayer();
end;

procedure level6();
begin
	currentInit    := $8800; //Raptor Wave 1
	currentPlay    := $8803;
	level.lvl      := 6;
//	level.desc     := "large wave of enemy fleet attacks!";
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 20;
	level.complete := 0;
	levelKills     := 0;
	respawnDelay   := 200;
	spawnFDelay    := 100;
	level.boss     := 0;
	doLevelStartScreen();
	spawn(113,0,250,1,130,3,blue,2);
	spawn(33,0,250,1,130,3,green,2);
	spawn(273,0,250,1,100,3,yellow,2);
	spawn(153,0,250,1,60,3,brown,1);
    spawn(73,0,250,1,0,3,brown,1); 
	spawn(233,0,250,1,25,3,brown,1);
	spawn(193,0,250,1,200,3,red,2);
	initPlayer();
end;

procedure level5();
begin
	level.lvl      := 5;
//	level.desc     := "large wave of enemy fleet attacks!";
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 20;
	level.complete := 0;
	levelKills     := 0;
	respawnDelay   := 500;
	spawnFDelay    := 200;
	level.boss     := 0;
	doLevelStartScreen();
	spawn(113,80,80,0,0,0,blue,2);
	spawn(33,80,80,0,0,0,green,2);
	spawn(273,80,80,0,0,0,yellow,2);
	spawn(153,130,130,0,0,0,brown,1);
    spawn(73,130,250,1,100,0,brown,1); 
	spawn(233,130,250,1,100,0,brown,1);
	spawn(193,80,80,0,0,0,red,2);
	initPlayer();
end;

procedure level4();
begin
	respawnDelay := 50; //faster respawn
	
	level.lvl      := 4;
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 15;
	level.complete := 0;
	levelKills     := 0;
	spawnFDelay    := 50; //faster fire after respawn
	level.boss     := 0;
	doLevelStartScreen();
    spawn(53,130,130,0,0,0,red,5);
	spawn(233,130,130,0,0,0,red,5);
	spawn(1,80,250,4,100,1,green,2);	
    spawn(193,80,250,4,100,2,yellow,2);
	initPlayer();
end;

procedure level3();
begin
	level.lvl      := 3;
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 10;
	level.complete := 0;
	levelKills     := 0;
	respawnDelay   := 100; //faster respawn
	level.boss     := 0;
	doLevelStartScreen();
	spawn(113,80,80,0,0,0,blue,2);
	spawn(153,130,250,1,100,0,brown,1);
	spawn(193,80,80,0,0,0,red,2);
	spawn(320,220,220,0,0,6,red,6); 
	spawn(0,200,200,0,0,7,red,7);
	initPlayer();
end;

procedure level2();
begin
	level.lvl      := 2;
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 10;
	level.complete := 0;
	levelKills     := 0;
	level.boss     := 0;
	doLevelStartScreen();
	spawn(33,0,80,1,0,0,green,2);
	spawn(273,0,80,1,0,0,yellow,2);
    spawn(73,130,130,0,0,0,brown,1);
	spawn(233,130,130,0,0,0,brown,1);
	spawn(153,0,250,1,60,3,brown,3);
	initPlayer();
end;

procedure level1();
begin
	level.lvl      := 1;
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 7;
	level.complete := 0;
	levelKills     := 0;
	level.boss     := 0;
	doLevelStartScreen();
	spawn(113,80,80,0,0,0,blue,2);
	spawn(33,80,80,0,0,0,green,2);
	spawn(273,80,80,0,0,0,yellow,2);
	spawn(153,130,130,0,0,0,brown,1);
    spawn(73,130,250,0,0,0,brown,1); 
	spawn(233,130,250,0,0,0,brown,1);
	spawn(193,80,80,0,0,0,red,2);
	initPlayer();
end;

procedure levelBoss();
begin
   level.lvl      := 10;
   level.respawn  := 0;
   level.scroll   := 0;
   level.boss     := 1;
   level.stage    := 0;
   level.counter  := 0;
   level.kills    := 0;
   level.complete := 0;
   levelKills     := 0;
   spawnFDelay    := 200;
   player2        := 0; //Disable player 2 if active
   doLevelStartScreen();
   initPlayer();
   initStationBoss();
end;

procedure levelTest();
//Test new stuff in this level
begin
    level.lvl      := 5;
//	level.desc     := "large wave of enemy fleet attacks!";
	level.respawn  := 1;
	level.scroll   := 0;
	level.kills    := 100;
	level.complete := 0;
	levelKills     := 0;
	respawnDelay   := 50;
	spawnFDelay    := 255;
	level.boss     := 0;
	doLevelStartScreen();
//	initDebugCol();
//	spawn(113,80,80,0,0,0,blue,2);
	spawn(33,80,80,0,0,0,green,2);
//	spawn(273,80,80,0,0,0,yellow,2);
//	spawn(153,130,130,0,0,0,brown,1);
//    spawn(73,130,250,1,100,0,brown,1); 
//	spawn(233,130,250,1,100,0,brown,1);
//	spawn(193,80,80,0,0,0,red,2);
	initPlayer();
end;

interrupt levelTop();
begin
	StartIRQ(useKernal);
	if(player.alive = 1) then call(SIDFILE_3_PLAY);
	vic_data_loc:=$18;
	setbank(vic_bank2);
	setbitmapmode();
   	setmulticolormode();
	RasterIRQ(levelMiddle(),136,useKernal);
    closeirq();	
end;

interrupt levelMiddle();
begin
	StartIRQ(useKernal);
	nop(67);
	//vic_data_loc:=orig_vic;
	setbank(vic_bank0);
	setregularcolormode();
	settextmode();
	RasterIRQ(levelBottom(),185,useKernal);
	closeirq();	
end;

interrupt levelBottom();
begin
	StartIRQ(useKernal);
	vic_data_loc:=$18;
	setbank(vic_bank2);
	setbitmapmode();
   	setmulticolormode();
	RasterIRQ(levelTop(),0,useKernal);
	closeirq();	
end;

procedure doLevelStartScreen();
begin
	//Show the level and lives, this should be shown at the start of a new level or after a death
	// Re copy the image colour as the colour ram will have been changed by gameplay
	joystick(2); //catch if the button is being held
    copyimagecolordata(#title_color,2);
	initsid(SIDFILE_3_INIT);
	StartRasterChain(levelTop(),0,useKernal);
	player.x := 150; //location for player sprite during transition screen
	player.y := 164;
	spritepos(player.x,player.y,0);
	setspriteloc(0,rapier,0); //player sprite
    togglebit(SPRITE_BITMASK,0,1);   
	ClearScreen(key_space,screen_char_loc);
	// Print Next level and lives
	moveto(12,12,hi(screen_col_loc));
	fill(screenmemory,yellow,136);
	moveto(12,12,hi(screen_char_loc));
	printstring("NEXT LEVEL: ",0,12);
	moveto(24,12,hi(screen_char_loc));
	printdecimal(level.lvl,1);
	moveto(18,15,hi(screen_char_loc));
	printstring(" X ",0,3);
	moveto(21,15,hi(screen_char_loc));
	printdecimal(player.lives,1);
	if level.respawn = 1 then killsCountDown := level.kills;
	while (joystickbutton = 1) do begin //if button is held wait til they let go
		joystick(2);
	end;
    while (joystickbutton <> 1) do begin //Stay until fire
        joystick(2);   
    end;
    preventirq(); //terminate Raster
   // vic_data_loc := orig_vic; //Reset data location
    setbank(vic_bank0); //Back to bank0 where the stars/sprite data resides
	setregularcolormode();
	settextmode();
	setcharsetlocation(charsetLoc);
	ClearScreen(key_space,screen_char_loc);
	player.x := 160; //Player X pos
    player.y := 210; //player starting Y pos
    initHUD(); //Draw E: and SCORE on screen
    //initDebugCol(); //Debug Collisions
    call(currentInit); //Reset Level diddy
    if musicOn = 0 then clearsound();
    levelClean := 0;
end;

procedure doLevelCompleted();
begin
	//Cleanup sprites, respawns and slots
	m := 0; //slight delay before cleanup
	while (m < 5000) do begin
		inc(m);
	end;
	PreventIRQ(); //pause IRQ, when there were a lot of sprites happening it was causing some interesting anomalies
	clearRespawn(); //Halt any current inprogress respawns
	resetEntities(); //Turn off entities and have them jump out
	StartRasterChain(gameRaster(),$00,useKernal); //Start game raster //resume IRQ now that end level is set up
	m := 0;
	while (m < 60000) do begin
		inc(m);
	end;
	PreventIRQ(); //pause IRQ, when there were a lot of sprites happening it was causing some interesting anomalies
	resetExplosion(); //reset explosion array
	clearsound();
    resetBullet(); //Stop in flight bullets from appearing in next level
    clearSpriteSlots(); //clear all slots
end;

procedure doShowLives();
begin
	m := 0;
	while (m < 10000) do begin
		inc(m);
	end;
	//Stop previous IRQ
    PreventIRQ();	
    ClearScreen(key_space,screen_char_loc);
    ClearScreen(yellow,screen_col_loc);
    sprite_bitmask := %00000000; //everything off
    clearsound();
    player.x := 150; //location for player sprite during transition screen
	player.y := 164;
	setspriteloc(0,rapier,0); //player
    sprite_color[0]   := blue; //player
    spritepos(player.x,player.y,0);
    togglebit(SPRITE_MULTICOLOR,0,1);
    togglebit(SPRITE_BITMASK,0,1);  
    screenmemory := AddressTable(#screen_addr,18,15);
    printstring(" X ",0,3);
	screenmemory := AddressTable(#screen_addr,21,15);
	printdecimal(player.lives,1);
	resetExplosion(); //reset explosion array
    resetBullet(); //Stop in flight bullets from appearing in next level
    while (joystickbutton = 1) do begin //if button is being held wait til they stop
		joystick(2);
	end;
	while (joystickbutton <> 1) do begin //Stay until fire
        joystick(2);   
    end;
    ClearScreen(key_space,screen_char_loc);
    initPlayer();
    initHUD();
    showEntities();
end;

/*
	Finds an available slot out of @max, checks for time =0

*/

procedure FindAvailableSlot(); // returns j
begin
	j:=0;
	for i:=0 to egmaxx do begin
		if text[i].time=0 then
		begin 
			j:=i; 
			return(); 
		end;
	end;
end;
	
/*
	Advances the text counter, searches through data and assigns a new slot (out of total @max)
*/
procedure Advance();
begin
	// Finds one out of @max available slots (with time zero)
	FindAvailableSlot(); // Sets j
	// keep x/y position
	egx:=egtextPtr[0];
	egy:=egtextPtr[1];
	text[j].x:=egx;
	text[j].y:=egy;

	// Set time to size of color list
	text[j].time:=40; // set time
	// Advance to text
	egtextPtr:=egtextPtr+2;
	// Move screenmemory pointer to $d800 color ram
	moveto(egx,egy,hi(screen_col_loc));
	egcolorPtr:=screenmemory;
	// Also, move to screen position
	moveto(egx,egy,hi(screen_char_loc));
	i:=0;
	// Write chars as long as char isn't zero 
	while (egtextPtr[0]<>0) do begin
		egcolorPtr[i]:=0; // Should be black!
		egval:=egtextPtr[0];
		if (egval>64) then egval-=64; // Petscii/c64 codes conversion
		screenmemory[i]:=egval;
		inc(i);
		egtextPtr:=egtextPtr+1;
	end;
	text[j].len:=i; // Set length
	egwaitTime:=egtextPtr[1];
	// Pointing to the next
	egtextPtr:=egtextPtr+2;
	
end;

/*
	Called per frame (or second, or whatever)
	Loops through all slots with time>0 and updates color ram. 
	Color should be terminated same as background color, here black

*/
procedure UpdateTextColors();
begin
	for i:=0 to egmaxx do begin
		if (text[i].time<>0) then begin // is active: update color 
			text[i].time-=1; 
			moveto(text[i].x, text[i].y, hi(screen_col_loc));
			fill(screenmemory,egcolors[text[i].time],text[i].len);
		end;
	end; 

end;


/*
	Main update loop, called from the raster
*/
procedure Update();
begin
	inc(egtime1);
	// Update colors
	UpdateTextColors();
	// Every 7th frame, advance timer
	if (egtime1&7=0) then begin	
		dec(egwaitTime);
		// if wait time is over, advance text pointer and create a new slot
		if (egwaitTime>127) then 
			Advance();
	end;
    
end;

// Main raster, enables Update to be called once per raster cycle
interrupt RasterEndGame();
begin
	StartIRQ(useKernal);
	if egtextPtr[0]<>255 then Update();
    call(currentPlay);
	CloseIRQ();
end;

procedure doEndGame();
begin
	StartRasterChain(RasterEndGame(),$00,useKernal);
    while (egtextPtr[0]<>255 ) do begin
    end;
	while (joystickbutton <> 1) do begin //Stay until fire
        joystick(2);   
    end;
    PreventIRQ();
end;

procedure initLevels();
begin
	//levelTree[0] := #levelTest; //testing placeholder
	levelTree[0] := #level1;
	levelTree[1] := #level2;
	levelTree[2] := #level3;
	levelTree[3] := #level4;
	levelTree[4] := #level5;
	levelTree[5] := #level6;
	levelTree[6] := #level7;
	levelTree[7] := #level8;
	levelTree[8] := #level9;
	levelTree[9] := #levelBoss;
end;